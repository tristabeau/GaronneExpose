<?php

/**
 *
 * Code skeleton generated by dia-uml2php5 plugin
 * written by KDO kdo@zpmag.com
 */

class Email {
	/**
	 * mail content
	 * @var array
	 * @access private
	 */
	private $mail_content = array();

	 
	public final function __construct ()  {
		//Init some values..
		$this->mail_content['boundary'] = "--" .md5(uniqid("uniqueboundary"));
		$this->mail_content['encoding'] = '7bit';
		$this->mail_content['acknowledge'] = false;
		$this->mail_content['xheaders']["Reply-To"] = '';
		$this->mail_content['attachment'] = array();
		$this->setFormat();
		$this->setCharset();
		$this->setPriority();
	}

	/**
	 * Set FROM email (mandatory)
	 * @access public
	 * @param string $from
	 */

	public final function setFrom ($email) {
		//Test that from is not empty
		if (strlen(trim($email)) == 0) {
			$error_msg = 'ERROR : No email adress FROM specify';
			throw new Exception($error_msg);
		}
		else {
			//Save from and define some header
			$email = trim($email);
			$this->mail_content['from']                     = $email;
			$this->mail_content['xheaders']['From']         = $email;
			$this->mail_content['xheaders']['Return-Path']  = $email;
			$this->mail_content['xheaders']['Errors-To']    = $email;
			$this->mail_content['xheaders']['X-Errors-To']  = $email;
		}
	}

	/**
	 * Set REPLY-TO email
	 * @access public
	 * @param string $replyto
	 */
	public final function setReplyTo ($email) {
		//Test that from is not empty
		if (strlen(trim($email)) == 0) {
			$error_msg = 'ERROR : No email adress for Reply-To specify';
			throw new Exception($error_msg);
		}
		else {
			$this->mail_content['xheaders']["Reply-To"]     = $email;
		}
	}

	/**
	 * add TO email (optional)
	 * @access public
	 * @param string or array $email
	 */
	public final function addTo ($email) {
		if (is_array($email) && count($email) > 0) {
			if (!is_array($this->mail_content['to'])) $this->mail_content['to'] = array();
			$this->mail_content['to'] = array_merge($this->mail_content['to'],$email);
		}
		else if (strlen(trim($email)) > 0) { $this->mail_content['to'][] = $email; }
	}

	/**
	 * add CC email (optional)
	 * @access public
	 * @param string or array $email
	 */

	public final function addCc ($email) {
		if (is_array($email) && count($email) > 0) {
			if (!is_array($this->mail_content['cc'])) { $this->mail_content['cc'] = array(); }
			$this->mail_content['cc'] = array_merge($this->mail_content['cc'],$email);
		}
		else if (strlen(trim($email)) > 0) { $this->mail_content['cc'][] = $email; }
	}

	/**
	 * add BCC email (optional)
	 * @access public
	 * @param string or array $email
	 */

	public final function addBcc ($email) {
		if (is_array($email) && count($email) > 0) {
			if (!is_array($this->mail_content['bcc'])) $this->mail_content['bcc'] = array();
			$this->mail_content['bcc'] = array_merge($this->mail_content['bcc'],$email);
		}
		else if (strlen(trim($email)) > 0) { $this->mail_content['bcc'][] = $email; }
	}

	/**
	 * Set SUBJECT email (optional)
	 * @access public
	 * @param string $subject
	 */

	public final function setSubject ($subject) {
		//Define the subject
		$this->mail_content['subject'] = $subject;
	}

	/**
	 * Set MESSAGE email (optional)
	 * @access public
	 * @param string $message
	 */

	public final function setMessage ($message) {
		//Define the body mail
		$this->mail_content['message'] = $message;
	}

	/**
	 * Set FORMAT email (optional)
	 * @access public
	 * @param string $format (text or html, default is html)
	 */

	public final function setFormat ($format='html') {
		//All allowed values
		$allowed_values = array('text'=>'text/plain','html'=>'text/html');
		if (!array_key_exists($format,$allowed_values)) {
			$error_msg = 'ERROR : Unknow mail format '.$format.', values are : '.join(' or ',array_keys($allowed_values));
			throw new Exception($error_msg);
		}
		else {
			$this->mail_content['format'] = $allowed_values[$format];
		}
	}

	/**
	 * Set CHARSET email (optional)
	 * @access public
	 * @param string $charset (default is ISO-8859-1)
	 */

	public final function setCharset ($charset='ISO-8859-1') {
		$this->mail_content['charset'] = $charset;
	}

	/**
	 * Set PRIORIRY email (optional)
	 * @access public
	 * @param string $priority (low or normal or high, default is normal)
	 */

	public final function setPriority ($priority='normal') {
		//Test if priority is in array of possible values
		$allowed_values = array('low'=>array('x-priority'=>'5','msmail-priority'=>'Lowest'),
                              'normal'=>array('x-priority'=>'3','msmail-priority'=>'Normal'),                                   
                              'high'=>array('x-priority'=>'1','msmail-priority'=>'Highest'));
		if (!array_key_exists($priority,$allowed_values)) {
			$error_msg = 'ERROR : Unknow priority '.$priority.', values are : '.join(' or ',array_keys($allowed_values));
			throw new Exception($error_msg);
		}
		else {
			//Define priority in header mail
			$this->mail_content['priority'] = $priority;
			$this->mail_content['xheaders']["X-Priority"] = $allowed_values[$priority]['x-priority'].' ('.$allowed_values[$priority]['msmail-priority'].')';
			$this->mail_content['xheaders']["X-MSMail-Priority"] = $allowed_values[$priority]['msmail-priority'];
			$this->mail_content['xheaders']["Importance"] = $allowed_values[$priority]['x-priority'];
		}
	}

	/**
	 * Ask acknoledge email (optional)
	 * @access public
	 */

	public final function setAcknowledge  () {
		$this->mail_content['acknowledge'] = true;
	}

	/**
	 * Set CHARSET email (optional)
	 * @access public
	 * @param string $file (file to add)
	 * @param string $display_name (name of the file in mail, optional)
	 * @param string $ctype (default is application/octet-stream)
	 * @param string $disposition (default is attachment)
	 */

	public final function addAttachment ($file, $display_name='', $ctype='application/octet-stream', $disposition='attachment') {
		//If file is not a file...
		if (!is_file($file)) {
			$error_msg = 'ERROR : File '.$file.' doesn\'t exist.';
			throw new Exception($error_msg);
		}
		else {
			//If cannot read the file
			if(!is_readable($file)) {
				$error_msg = 'ERROR : cannot access file '.$file.' wrong permission';
				throw new Exception($error_msg);
			}
			//Else we add file..
			else {
				if (strlen(trim($display_name)) == 0) { $display_name = basename($file); }

				//We check that $file is not already in the attachment array
				$can_add_file = true;
				//Have already file added ?
				if (count($this->mail_content['attachment']) > 0) {
					foreach ($this->mail_content['attachment'] as $key => $content) { $already_attach[] = $content['file']; }
					if (in_array($file,$already_attach)) { $can_add_file = false; }
				}
				 
				if ($can_add_file) {
					$this->mail_content['attachment'][] = array('file'=>$file, 'ctype'=>$ctype, 'disposition'=>$disposition, 'display_name'=>$display_name);
				}
			}
		}
	}

	public function useTemplate($content){
		$parameters = array(
		$content['link_appli'],
		$content['img_link_appli'],
		$content['trans1'],
		$content['title'],
		$content['link_portal'],
		$content['img_portal'],
		$content['trans_portal'],
		$this->mail_content['message'],
		$content['trans_questions'],
		$content['trans_svp_1'],
		$content['mailadress'],
		$content['trans_svp_2'],
		$content['trans_svp_3'],
		);

		$format = file_get_contents('/websuite/www/common/templates/mailtemplate.php');

		$merged_array = array_merge((array)$format, $parameters);

		$this->mail_content['message'] = call_user_func_array('sprintf', $merged_array);
		
		return $end_string;
	}


	/**
	 * To send mail
	 * @access public
	 * @return bool
	 */

    public final function sendMail() {
        //Build headers
        $this->_buildMail();
        //Implode all to if exist
        $to = (is_array($this->mail_content['to']) ? join(', ',$this->mail_content['to']) : '' );
        //Purge FROM to put -f option, we keep only email part of from
        @eregi("([[:alnum:]_.-]+)@([^[:space:]>;\"]*)", $this->mail_content['from'], $from_array);
        $return_tag = "-f".$from_array[0];
        if (strlen($from_array[0]) == 0) $return_tag = "webmaster@lancea-news.com";

        if (strtolower($this->mail_content['charset']) == 'utf-8') {
            $this->mail_content['subject'] = '=?UTF-8?B?'.base64_encode($this->mail_content['subject']).'?='; 
        }

        $status = mail($to, $this->mail_content['subject'],
        $this->mail_content['fullbody'],
        $this->mail_content['header'],
        $return_tag);
        return $status;
    }

	/**
	 * To build the complete mail header
	 * @access private
	 */

	private function _buildMail() {
		//If none to send mail...
		if ((count($this->mail_content['to']) == 0 && count($this->mail_content['cc']) == 0 &&
		count($this->mail_content['bcc']) == 0) || strlen($this->mail_content['from']) == 0 ){
			$error_msg = 'ERROR : Fields FROM is empty or fields TO/CC/BCC are empty all the three.';
			throw new Exception($error_msg);
		}
		else {
			//Implode all cc
			if (isset($this->mail_content['cc']) && count($this->mail_content['cc']) > 0) {
				$this->mail_content['xheaders']["Cc"] = implode(',',$this->mail_content['cc']);
				$this->mail_content['xheaders']["CopyTo"] = implode(',',$this->mail_content['cc']);
			}

			//Implode all bcc
			if (!empty($this->mail_content['bcc'])) {
				$this->mail_content['xheaders']["Bcc"] = implode(',',$this->mail_content['bcc']);
				$this->mail_content['xheaders']["BlindCopyTo"] = implode(',',$this->mail_content['bcc']);
			}

			$this->mail_content['xheaders']['X-Mailer'] = 'FM Logistic';
			$this->mail_content['xheaders']['Mime-Version'] = "1.0";
			$this->mail_content['xheaders']['Content-Type'] = $this->mail_content['format'].'; charset='.$this->mail_content['charset'];

			//If we ask for an acknowledge
			if ($this->mail_content['acknowledge']) {
				$this->mail_content['xheaders']['X-Confirm-Reading-To'] =  $this->mail_content['xheaders']['From'];
				$this->mail_content['xheaders']['Disposition-Notification-To'] =  $this->mail_content['xheaders']['From'];
				$this->mail_content['xheaders']['ReturnReceipt'] =  1;
			}

			//If nothing was specify on Reply-To we use From...
			if (strlen(trim($this->mail_content['xheaders']["Reply-To"])) == 0 ) {
				$this->mail_content['xheaders']["Reply-To"] = $this->mail_content['xheaders']['From'];
			}

			//If we attach some files
			if (count($this->mail_content['attachment']) > 0 ) { $this->_buildAttachement(); }
			else {$this->mail_content['fullbody'] = $this->mail_content['message'];}

			$this->mail_content['header'] = '';
			foreach ($this->mail_content['xheaders'] as $key => $value) {
				$this->mail_content['header'] .= $key.': '.$value."\n";
			}
		}
	}

	/**
	 * To add attachment in mail
	 * @access private
	 */

	private function _buildAttachement() {
		$this->mail_content['xheaders']['Content-Type'] = "multipart/mixed;\n boundary=\"".$this->mail_content['boundary']."\"";
		$this->mail_content['fullbody']  = "This is a multi-part message in MIME format.\n\n--".$this->mail_content['boundary']."\n";
		$this->mail_content['fullbody'] .= "Content-Type: ".$this->mail_content['format']."; charset=".$this->mail_content['charset'];
		$this->mail_content['fullbody'] .= "\nContent-Transfer-Encoding: ".$this->mail_content['format']."\n\n".$this->mail_content['message']."\n\n";
		 
		//Add all files into mail with base64 encoding
		$stack_attachment = array();
		foreach ($this->mail_content['attachment'] as $key => $array_file) {
			$sub_header  = "--".$this->mail_content['boundary'];
			$sub_header .= "\nContent-Type: ".$array_file['ctype'].";\n name=\"".$array_file['display_name'];
			$sub_header .= "\nContent-ID: ".$array_file['display_name'];
			$sub_header .= "\";\nContent-Transfer-Encoding: base64\n";
			$sub_header .= "Content-Disposition: ".$array_file['disposition'].";\n  filename=\"".$array_file['display_name']."\"\n";
			$stack_attachment[] = $sub_header;
			$linesz = filesize($array_file['file'])+1;
			$fp= fopen($array_file['file'], 'r' );
			$stack_attachment[] = chunk_split(base64_encode(fread($fp, $linesz)));
			fclose($fp);
		}
		$this->mail_content['fullbody'] .= implode(chr(13).chr(10), $stack_attachment);
	}

	/**
	 * To expunge TO properties
	 * @access public
	 */

	public final function delTo  () {
		$this->mail_content['to'] = array();
	}

	/**
	 * To expunge CC properties
	 * @access public
	 */

	public final function delCc  () {
		$this->mail_content['cc'] = array();
	}

	/**
	 * To expunge BCC properties
	 * @access public
	 */

	public final function delBcc  () {
		$this->mail_content['bcc'] = array();
	}

	/**
	 * To expunge Attachment properties
	 * @access public
	 */

	public final function delAttachment  () {
		$this->mail_content['attachment'] = array();
	}

}
?>
